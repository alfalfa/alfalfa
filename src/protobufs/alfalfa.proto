syntax = 'proto2';

package AlfalfaProtobufs;

message VideoInfo {
  required uint32 width = 2;
  required uint32 height = 3;
}

message SourceHash {
  optional uint64 state_hash = 1;
  optional uint64 last_hash = 3;
  optional uint64 golden_hash = 4;
  optional uint64 alt_hash = 5;
}

message TargetHash {
  required uint64 state_hash = 1;
  required uint64 output_hash = 3;
  required bool update_last = 4;
  required bool update_golden = 5;
  required bool update_alternate = 6;
  required bool last_to_golden = 7;
  required bool last_to_alternate = 8;
  required bool golden_to_alternate = 9;
  required bool alternate_to_golden = 10;
  required bool shown = 11;
}

message DecoderHash {
  required uint64 state_hash = 1;
  required uint64 last_hash = 2;
  required uint64 golden_hash = 3;
  required uint64 alt_hash = 4;
}

message RasterData {
  required uint64 hash = 1;
}

message FrameInfo {
  required uint64 offset = 1;
  required uint64 length = 2;
  required SourceHash source_hash = 3;
  required TargetHash target_hash = 4;
  required uint64 frame_id = 5;
}

message QualityData {
  required uint64 original_raster = 1;
  required uint64 approximate_raster = 2;
  required double quality = 3;
}

message TrackData {
  required uint64 track_id = 1;
  required uint64 frame_index = 2;
  required uint64 displayed_raster_index = 3;
  required uint64 frame_id = 4;
}

message SwitchData {
  required uint64 from_track_id = 1;
  required uint64 from_frame_index = 2;
  required uint64 to_track_id = 3;
  required uint64 to_frame_index = 4;
  required uint64 frame_id = 5;
  required uint64 switch_frame_index = 6;
}

message SizeT {
  required uint64 sizet = 1;
}

message FrameIterator {
  repeated FrameInfo frame = 1;
}

message QualityDataIterator {
  repeated QualityData quality_data = 1;
}

message TrackDataIterator {
  repeated TrackData track_data = 1;
}

message SwitchInfo {
  repeated FrameInfo frame = 1;
  required uint64 from_track_id = 2;
  required uint64 to_track_id = 3;
  required uint64 from_frame_index = 4;
  required uint64 to_frame_index = 5;
  required uint64 switch_start_index = 6;
  required uint64 switch_end_index = 7;
}

message Switches {
  repeated SwitchInfo switch_infos = 1;
}

message TrackIdsIterator {
  repeated uint64 track_id = 1;
}

message TrackPosition {
  required uint64 track_id = 1;
  required uint64 frame_index = 2;
}

message TrackPositionDisplayedRasterIndex {
  required uint64 track_id = 1;
  required uint64 displayed_raster_index = 2;
}

message TrackRangeArgs {
  required uint64 track_id = 1;
  required uint64 start_frame_index = 2;
  required uint64 end_frame_index = 3;
}

message SwitchRangeArgs {
  required uint64 from_track_id = 1;
  required uint64 to_track_id = 2;
  required uint64 from_frame_index = 3;
  required uint64 switch_start_index = 4;
  required uint64 switch_end_index = 5;
}

message Chunk {
  required bytes buffer = 1;
}

message Empty {

}

service AlfalfaVideo {
  rpc get_track_size( SizeT ) returns ( SizeT ) {}
  rpc get_frame_by_id( SizeT ) returns ( FrameInfo ) {}
  rpc get_frame_by_track_pos( TrackPosition ) returns ( TrackData ) {}
  rpc get_raster( SizeT ) returns ( SizeT ) {}
  rpc get_frames( TrackRangeArgs ) returns ( FrameIterator ) {}
  rpc get_frames_reverse( TrackRangeArgs ) returns ( FrameIterator ) {}
  rpc get_frames_in_switch( SwitchRangeArgs ) returns ( FrameIterator ) {}
  rpc get_quality_data_by_original_raster( SizeT ) returns ( QualityDataIterator ) {}
  rpc get_frames_by_output_hash( SizeT ) returns ( FrameIterator ) {}
  rpc get_frames_by_decoder_hash( DecoderHash ) returns ( FrameIterator ) {}
  rpc get_track_ids( Empty ) returns ( TrackIdsIterator ) {}
  rpc get_track_data_by_frame_id( SizeT ) returns ( TrackDataIterator ) {}
  rpc get_track_data_by_displayed_raster_index( TrackPositionDisplayedRasterIndex ) returns ( TrackDataIterator ) {}
  rpc get_switches_ending_with_frame( SizeT ) returns ( Switches ) {}
  rpc get_chunk( FrameInfo ) returns ( Chunk ) {}
  rpc get_video_width( Empty ) returns ( SizeT ) {}
  rpc get_video_height( Empty ) returns ( SizeT ) {}
}
